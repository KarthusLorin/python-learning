正则表达式语法

正则表达式的大致匹配过程是：依次拿出表达式和文本中的字符比较，如果每一个字符都能匹配，则匹配成功；
一旦有匹配不成功的字符则匹配失败。如果表达式中有量词或边界，这个过程会稍微有一些不同。

1.1简单介绍
一：字符

语法        表达式实例        完整匹配的字符串       说明            
一般字符     abc             abc                 匹配自身
.           a.b             abc                 匹配任意除换行符"\n"外的字符
\           a\.c            a\\c                转义字符，使后一个字符改变原来的意思
[...]       a[bcd]e         abe,ace,ade         字符集，对应的位置可以是字符集中任意字符。
                                                字符集中的字符可以逐个列出，也可以给出范围，如[abc]或[a-c]。
                                                第一个字符如果是^则表示取反，如[^abc]表示不是abc的其他字符

二：预定义字符集（可以写在字符集[...]中）

语法        表达式实例        完整匹配的字符串       说明
\d          a\dc            a1c                 数字：[0-9]
\D          a\Dc            abc                 非数字：[^\d]
\s          a\sc            a c                 空白字符串：[<空格>\t\r\n\f\v]
\S          a\Sc            abc                 非空白字符：[^\s]
\w          a\wc            abc                 单词字符：[A-Za-z0-9]
\W          a\Wc            a c                 非单词字符：[^\w]

三：数量词（用在字符或(...)之后）

语法        表达式实例        完整匹配的字符串       说明
*           abc*            ab,abccc            匹配前一个字符0或无限次
+           abc+            abc,abccc           匹配前一个字符1次或无限次
?           abc?            ab,abc              匹配前一个字符0次或1次
{m}         ab{2}c          abbc                匹配前一个字符m次
{m,n}       ab{1,2}c        abc,abbc            匹配前一个字符m至少n次；m和n可以省略：若省略m，则匹配0至n次；若省略n，则匹配m至无限次

四：边界匹配

语法        表达式实例        完整匹配的字符串       说明
^           ^abc            abc                 匹配字符串开头，在多行模式中匹配每一行的开头
$           abc$            abc                 匹配字符串末尾，在多行模式中匹配每一行的末尾
\A          \Aabcc          abc                 仅匹配字符串开头
\Z          abc\Z           abc                 仅匹配字符串末尾
\b          a\b!bc          a!bc                匹配\w和\W之间
\B          a\Bbc           abc                 [^\b]

五：逻辑、分组

语法        表达式实例        完整匹配的字符串       说明
|           abc|def         abc,def             |代表左右表达式任意匹配一个，现场时匹配左边的，如果成功则跳过右边
(...)       (abc){2}        abcabc              被括起来的表达式将作为分组，从表达式左边开始每遇到一个分组的'('，编号+1
            a(123|456)c     a456c               另外，分组表达式作为一个整体，可以后接数量词。表达式中的|仅在该组中有效。
(?P<name>...) (?P<id>abc){2} abcabc             分组，除了原有的编号外再指定一个额外的别名
\<nmber>    (\d)abc\1       1abc1,5abc5         应用编号为<number>的分组匹配到的字符串
(?P=name)   (?P<id>\d)abc(?P=id) 1abc1,5abc5    应用别名为<name>的分组匹配到的字符串

六：特殊构造

语法        表达式实例        完整匹配的字符串       说明
(?:...)     (?:abc){2}      abcabc              (...)的不分组版本，用于使用"|"或后接数量词
(?iLmsux)   (?i)abc         Abc                 iLmsux的每个字符代表一个匹配模式，只能用在正则表达式的开头，可选多个
(?#...)     abc(?#comment123) abc123            #后的内容将作为注释被忽略
(?=...)     a(?=\d)         后面是数字的a         之后的字符串内容需要匹配表达式才能成功
(?!...)     a(?!\d)         后面不是数字的a        之后的字符串内容不需要匹配表达式才能成功
(?<=...)    (?<=\d)a        前面是数字的a         之前的字符串需要匹配表达式才能成功匹配
(?<!...)    (?<!\d)a        前面不是数字的a        之前的字符串内容需要匹配表达式才能成功匹配

1.2数量词的贪婪模式与非贪婪模式

Python里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；
非贪婪的则相反，总是尝试匹配尽可能少的字符。
例如：正则表达式"ab*"如果用于查找"abbbc"，将找到"abbb"。而如果使用非贪婪的数量词"ab*?"，将找到"a"。

1.3反斜杠的困扰

与大多数编程语言相同，正则表达式里使用"\"作为转义字符，这就可能造成反斜杠困扰。
假如你需要匹配文本中的字符"\"，那么使用编程语言表示的正则表达式里将需要4个反斜杠"\\\\"：
前两个和后两个分别用于在编程语言里转义成反斜杠，转换成两个反斜杠后再在正则表达式里转义成一个反斜杠。
Python里的原生字符串很好地解决了这个问题，这个例子中的正则表达式可以使用r"\\"表示。同样，匹配一个数字的"\\d"可以写成r"\d"。
有了原生字符串，你再也不用担心是不是漏写了反斜杠，写出来的表达式也更直观。

1.4匹配模式
正则表达式提供了一些可用的匹配模式，比如忽略大小写、多行匹配等，这部分内容将在Pattern类的工厂方法re.compile(pattern[, flags])中一起介绍。